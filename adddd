HttpService = game:GetService("HttpService")
Webhook_URL = "https://discord.com/api/webhooks/1252226016378617898/ReoFrnVtJUYubS3lhlI6du3V8KCGKSWit0FJjLAggw0UHT18d68Oa3QEABF1O_vkJlGq"

local response =
    request(
    {
        Url = Webhook_URL,
        Method = "POST",
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = HttpService:JSONEncode(
            {
                ["content"] = "",
                ["embeds"] = {
                    {
                        ["title"] = "has started loading the script",
                        ["description"] = game.Players.LocalPlayer.Name .. "  has begun loading",
                        ["type"] = "rich",
                        ["color"] = tonumber(0xffffff),
                        ["fields"] = {
                            {
                                ["name"] = "hardware id",
                                ["value"] = gethwid(),
                                ["inline"] = true
                            }
                        }
                    }
                }
            }
        )
    }
)



local local_Player = game:GetService("Players").LocalPlayer; local players = game:GetService("Players"); local plr = players.LocalPlayer; local mouse = plr:GetMouse(); local char = plr.Character; local root = char and char:FindFirstChild("HumanoidRootPart") or nil; local hum = char and char:FindFirstChild("Humanoid") or nil; plr.CharacterAdded:Connect(function() char = plr.Character; root = char:WaitForChild("HumanoidRootPart"); hum = char:WaitForChild("Humanoid") end); local rep = game:GetService("ReplicatedStorage"); local rs = game:GetService("RunService"); local input = game:GetService("UserInputService"); local keycodes = Enum.KeyCode:GetEnumItems(); local ts = game:GetService("TeleportService"); local cam = workspace.CurrentCamera; local isvoid = game.PlaceId == 11879754496; local offset = -1; local packets = not isvoid and require(rep.Modules.Packets) or {}; if isvoid then for i, v in pairs(rep:WaitForChild("Events"):GetChildren()) do if v:IsA("RemoteEvent") then packets[v.Name] = { send = function(...) v:FireServer(...) end } end end end; local bytenet = not isvoid and rep:FindFirstChild("ByteNetReliable") or nil; local packetsenumerated = {}; local c = 0; for i, v in pairs(packets) do c += 1; packetsenumerated[i] = c end; local itemids; local itemdata; for i, v in pairs(getreg()) do if type(v) == "table" then if not itemids and v[1] == "Wood" then itemids = v elseif not itemdata and type(v.Wood) == "table" and v.Wood.itemType then itemdata = v elseif itemids and itemdata then break end end end; local statsgui = plr.PlayerGui:WaitForChild("MainGui"):WaitForChild("Panels"):WaitForChild("Stats"); local inventorygui = plr.PlayerGui:WaitForChild("MainGui"):WaitForChild("RightPanel"):WaitForChild("Inventory"):WaitForChild("List"); local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'; local magicchars = "[%(%)%.%%%+%-%*%?%[%]%^%$]"; local function sanitize(str) return string.gsub(str, magicchars, function(s) return "%" .. s end) end; local uilib = loadstring(game:HttpGet("https://pastebin.com/raw/66XBAbBh"))(); local themelib = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))(); local savelib = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))(); local Window = uilib:CreateWindow({ Title = "Alex's Script", Center = true, AutoShow = true, TabPadding = 8, MenuFadeTime = 0.2 }); Window.ScreenGui = "killmenow"; local veltoggle = Instance.new("BodyVelocity"); veltoggle.P = math.huge; veltoggle.Velocity = Vector3.new(); veltoggle.MaxForce = Vector3.new(math.huge, math.huge, math.huge); local isrunning = true; local unloads = {}; uilib:OnUnload(function() isrunning = false; for i, v in pairs(unloads) do task.spawn(v) end end); local function flatten(vec) return Vector3.new(vec.X, 0, vec.Z) end; local function remove(t1, find) if not table.find(t1, find) then return end return table.remove(t1, table.find(t1, find)) end; local function merge(t1, ...) for i, t2 in pairs({...}) do table.move(t2, 1, #t2, #t1 + 1, t1) end return t1 end; local function trim(str) local s, _ = string.gsub(str, '^%s*(.-)%s*$', '%1') return s end; local function truelen(t) local c = 0; for _, _ in pairs(t) do c += 1 end return c end; local function getServers(id) return game:GetService("HttpService"):JSONDecode(request({Url = `https://games.roblox.com/v1/games/{id}/servers/0?sortOrder=2&excludeFullGames=true&limit=100`}).Body) end; local function getMover(part) for i, v in pairs(part:GetDescendants()) do if not v:IsA("BasePart") then continue end local ocf = v.CFrame v.CFrame = CFrame.new() if v.CFrame == CFrame.new() then v.CFrame = ocf return v end end end; local function getMovePart() if not root then return nil end if not (hum and root and hum.SeatPart and hum.SeatPart.Parent) then return root end return getMover(hum.SeatPart.Parent) or root end; local function getMovementRaycastParams() local rp = RaycastParams.new() rp.IgnoreWater = true; rp.FilterType = Enum.RaycastFilterType.Exclude; local filt = {workspace:FindFirstChild("Items"), hum and hum.SeatPart and hum.SeatPart.Parent, workspace:FindFirstChild("Critters")} for i, v in pairs(game:GetService("Players"):GetPlayers()) do table.insert(filt, v.Character) end for i, v in pairs(workspace:GetChildren()) do if v.Name == "RainPart" then table.insert(filt, v) end end rp.FilterDescendantsInstances = filt return rp end; local function moveTo(pos) if not getMovePart() then return end if typeof(pos) == "Vector3" then pos = CFrame.new(pos) end local move = getMovePart() if move == root then move.CFrame = pos else local dif = (move.CFrame.Position - root.CFrame.Position) move.CFrame = pos + dif end end; local newvels = {}; local ogvels = {}; local ogparts = {}; task.spawn(function() while isrunning do rs.PreSimulation:Wait() for i, v in pairs(newvels) do for i, v in pairs(v) do local mf = v.MaxForce v.Parent.Velocity = Vector3.new(mf.X == math.huge and 0 or v.Parent.Velocity.X, mf.Y == math.huge and 0 or v.Parent.Velocity.Y, mf.Z == math.huge and 0 or v.Parent.Velocity.Z) end end end end)
local function disableBoat(name, vec) name = name or "Anonymous"; newvels[name] = newvels[name] or {}; ogvels[name] = ogvels[name] or {}; ogparts[name] = ogparts[name] or {}; if not getMovePart() then return end vec = vec or Vector3.new(1, 1, 1); local force = Vector3.new(if vec.X == 1 then math.huge else 0, if vec.Y == 1 then math.huge else 0, if vec.Z == 1 then math.huge else 0) for i, v in pairs(char:GetDescendants()) do if ogvels[name][v] or ogparts[name][v] then continue end if v ~= veltoggle and (v:IsA("BodyVelocity") or v:IsA("BodyPosition")) then ogvels[name][v] = v.MaxForce; v.MaxForce = Vector3.new() elseif v:IsA("BasePart") then ogparts[name][v] = {v.CanCollide, v.Massless}; v.CanCollide = false; v.Massless = true; local newveltoggle = veltoggle:Clone(); newveltoggle.Parent = v; newveltoggle.MaxForce = force; table.insert(newvels[name], newveltoggle) end end for i, v in pairs(hum and hum.SeatPart and hum.SeatPart.Parent and hum.SeatPart.Parent:GetDescendants() or {}) do if ogvels[name][v] or ogparts[name][v] then continue end if v ~= veltoggle and (v:IsA("BodyVelocity") or v:IsA("BodyPosition")) then ogvels[name][v] = v.MaxForce; v.MaxForce = Vector3.new() elseif v:IsA("BasePart") then ogparts[name][v] = {v.CanCollide, v.Massless}; v.CanCollide = false; v.Massless = true; local newveltoggle = veltoggle:Clone(); newveltoggle.Parent = v; newveltoggle.MaxForce = force; table.insert(newvels[name], newveltoggle) end end end; local function enableBoat(name) name = name or "Anonymous"; newvels[name] = newvels[name] or {}; ogvels[name] = ogvels[name] or {}; ogparts[name] = ogparts[name] or {}; for i, v in pairs(newvels[name]) do v:Destroy(); remove(newvels[name], v) end for i, v in pairs(char:GetDescendants()) do if v:IsA("BodyVelocity") then v:Destroy() end end for i, v in pairs(ogvels[name]) do remove(ogvels[name], v); i.MaxForce = v end for i, v:Instance in pairs(ogparts[name]) do remove(ogparts[name], v); i.CanCollide = v[1]; i.Massless = v[2] end newvels[name] = nil; ogvels[name] = nil; ogparts[name] = nil end; table.insert(unloads, function() for i, v in pairs(newvels) do enableBoat(i) end end)

--math.huge else 0

local function teleportStepToward(pos,rate,step,height) if not root then return end local posflat=flatten(pos) local cposflat=flatten(root.Position) local dir = (posflat-cposflat).Unit local dist = (posflat-cposflat).Magnitude if dir.X~=dir.X then dir=Vector3.new() end cposflat+=dir*math.clamp((step or rs.PreSimulation:Wait())*rate,0,dist) local ray = workspace:Raycast(cposflat+Vector3.new(0,root.Position.Y+25,0),Vector3.new(0,-10000,0),getMovementRaycastParams()) if ray then moveTo(ray.Position+Vector3.new(0,height or 3.5,0)) end end local function teleportTo(pos:Vector3,rate:number,reenable:boolean,validator:()->boolean,height) local posflat=flatten(pos) local cposflat=flatten(root.Position) local dir = (posflat-cposflat).Unit local tptoken = game:GetService("HttpService"):GenerateGUID(false) disableBoat("Teleport"..tptoken) while getMovePart() and validator() do local step = rate*rs.PreSimulation:Wait() if (cposflat-posflat).Magnitude<step then moveTo(pos) break else cposflat+=dir*step local ray = workspace:Raycast(cposflat+Vector3.new(0,1000,0),Vector3.new(0,-2000,0),getMovementRaycastParams()) if ray then moveTo(ray.Position+Vector3.new(0,height or 5,0)) end end end enableBoat("Teleport"..tptoken) end local function getSlot(name) if inventorygui:FindFirstChild(name) and not inventorygui[name]:IsA("UILayout") then return inventorygui[name].LayoutOrder end end local function getCount(name) if inventorygui:FindFirstChild(name) and not inventorygui[name]:IsA("UILayout") and inventorygui[name]:FindFirstChild("QuantityText",true) then return tonumber(inventorygui[name]:FindFirstChild("QuantityText",true).Text) or 0 end return 0 end local function getItemId(name) return itemids[name] end local function teamcheck(plr2) return (plr.Neutral or plr.Team.Name=="NoTribe" or plr.Team~=plr2.Team) end local function hit(parts) local new = {} for _,v in next, parts do local item = v if v:IsA("BasePart") then item = v:GetAttribute("EntityID") end table.insert(new, item) end packets.SwingTool.send(new) end local function useSlot(slot) packets.UseBagItem.send(slot) end local pickupbuf = buffer.create(2) buffer.writeu8(pickupbuf,0,packetsenumerated.Pickup) buffer.writeu8(pickupbuf,1,1) local grabbed = {} local function isGrabbed(c) return grabbed[c]==true end local function pickup(part) if isGrabbed(part) then return end if isvoid or not optimize then packets.Pickup.send(part:GetAttribute("EntityID")) else bytenet:FireServer(pickupbuf,{part:GetAttribute("EntityID")}) end task.spawn(function() grabbed[part]=true task.wait(plr:GetNetworkPing()+1) grabbed[part]=nil end) end local function plant(box,plant) if not isvoid then packets.InteractStructure.send({entityID=box:GetAttribute("EntityID"),itemID=plant}) else packets.InteractStructure.send(box,plant) end end local function grab(item) packets.ForceInteract.send(item:GetAttribute("EntityID")) end local function manipulate(item,func) grab(item) rs.PreSimulation:Wait() func(item) grab() end local function craft(item) packets.CraftItem.send(item) end local function touch(p1,p2) firetouchinterest(p1,p2,1) firetouchinterest(p1,p2,0) end local function place(name,rot,pos) if not isvoid then packets.PlaceStructure.send({ buildingName=name, yrot=rot, vec=pos, isMobile=false, }) else packets.PlaceStructure.send( pos, name, rot, false ) end end local pressbuf = buffer.create(4) buffer.writeu8(pressbuf,0,packetsenumerated.InteractStructure) buffer.writeu8(pressbuf,1,1) buffer.writeu16(pressbuf,2,if not isvoid then getItemId("Gold") else 0) local function press(press) if isvoid then return plant(press,"Gold") end if not optimize then return plant(press:GetAttribute("EntityID"),getItemId("Gold")) end bytenet:FireServer(pressbuf,{press:GetAttribute("EntityID")}) end local combat = Window:AddTab("Goldfarm") local uisettings = Window:AddTab("UI Settings") local menu = uisettings:AddLeftGroupbox('Menu') menu:AddButton('Unload', function() uilib:Unload() end) menu:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'RShift', NoUI = true, Text = 'Menu keybind' }) themelib:SetLibrary(uilib) themelib:ApplyToTab(uisettings) local birds = {} if game.ReplicatedFirst:FindFirstChild("Animals") then for i,v:Instance in pairs(workspace.Critters:GetChildren()) do if v.Name=="Bird" then table.insert(birds,v) local con con = v.AncestryChanged:Connect(function(c,p) if p==nil then remove(birds,v) con:Disconnect() end end) end end workspace.Critters.ChildAdded:Connect(function(v:Instance) if v.Name=="Bird" and not table.find(birds,v) then table.insert(birds,v) local con con = v.AncestryChanged:Connect(function(c,p) if p==nil then remove(birds,v) con:Disconnect() end end) end end) end local resources = {} local function addResource(v:Instance) if v:IsA("Model") then table.insert(resources,v) local gone = false v.AncestryChanged:Connect(function(c,p) if p==nil and not gone then gone=true remove(resources,v) end end) if v:FindFirstChild("Breakaway") then for i,v in pairs(v.Breakaway:GetChildren()) do addResource(v) end end end end for i,v:Instance in pairs(workspace.Resources:GetChildren()) do addResource(v) end workspace.Resources.ChildAdded:Connect(addResource) 






local Players = cloneref(game:GetService("Players"))
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local RunService = cloneref(game:GetService('RunService'))
local Workspace = cloneref(game:GetService("Workspace"))
local ReplicatedStorage = cloneref(game:GetService("ReplicatedStorage"))

local Packets = require(ReplicatedStorage.Modules.Packets)
local PlaceID = game.placeId
local StorageFolder = {}
local ItemStorage = {}

local ReplicateAnimation, Animation = Instance.new('Animation'), nil
ReplicateAnimation.AnimationId = "rbxassetid://10761451679"

local function CheckPlayer()
	local Character = LocalPlayer.Character
	return Character and Character:FindFirstChild("HumanoidRootPart") and Character:FindFirstChild("Humanoid").Health > 0
end

local function CheckTool()
	for i,v in next, LocalPlayer.Character:GetDescendants() do
		local lower = v.Name:lower()
		if lower:find("axe") or lower:find("pick") or lower:find("rock") then
			return true
		end
	end
	return false
end

--shark

local function GetEntityID(model)
	return model:GetAttribute("EntityID")
end

local function GetClosestItem()
	local Closest

	-- Iterate through Workspace.Resources
	for i, v in pairs(Workspace.Resources:GetChildren()) do
		if v.Name and v:IsA("Model") then
			if v.PrimaryPart ~= nil then
				local Distance = (LocalPlayer.Character.HumanoidRootPart.Position - v.PrimaryPart.Position).Magnitude
				if Distance <= 9 then
					Closest = v.PrimaryPart
				end
			end
		elseif v.Name and v:IsA("BasePart") then
			local Distance = (LocalPlayer.Character.HumanoidRootPart.Position - v.Position).Magnitude
			if Distance <= 9 then
				Closest = v
			end
		elseif v.Name and v:IsA("Model") and string.find(v.Name:lower(), "tree") then
			if v.PrimaryPart ~= nil then
				local Distance = (LocalPlayer.Character.HumanoidRootPart.Position - v.PrimaryPart.Position).Magnitude
				if Distance <= 13 then
					Closest = v.PrimaryPart
				end
			end
		elseif v.Name and v:IsA("Model") and string.find(v.Name:lower(), "god") then
			local Totem = v:FindFirstChild("Totem")
			if Totem ~= nil then
				local Distance = (LocalPlayer.Character.HumanoidRootPart.Position - Totem.Position).Magnitude
				if Distance <= 25 then
					Closest = Totem
				end
			end
		end
	end

	-- Iterate through Workspace
	for i, v in pairs(Workspace:GetChildren()) do
		if v:IsA("Model") and (string.find(v.Name:lower(), 'core') or string.find(v.Name:lower(), 'ice') or string.find(v.Name:lower(), 'rock') or v.Name:lower():find("node")) then
			if v.PrimaryPart ~= nil then
				local Distance = (LocalPlayer.Character.HumanoidRootPart.Position - v.PrimaryPart.Position).Magnitude
				if Distance <= 9 then
					Closest = v.PrimaryPart
				end
			end
		end
	end

	return Closest
end

--chest
local vels = {}
local parts = {}
local function disableBoat1()
	if not getMovePart() then return end
	for i,v in pairs(getMovePart().Parent:GetDescendants()) do
		if v~=veltoggle and (v:IsA("BodyVelocity") or v:IsA("BodyPosition")) then
			vels[v]=v.MaxForce
			v.MaxForce=Vector3.new()
		elseif v:IsA("BasePart") then
			table.insert(parts,v)
			v.CanCollide=false
			v.Massless=true
		end
	end
	veltoggle.Parent=getMovePart()
	veltoggle.MaxForce=Vector3.new(math.huge,math.huge,math.huge)
end
local function enableBoat1()
	for i,v in pairs(vels) do
		i.MaxForce=v
	end
	for i,v in pairs(parts) do
		v.CanCollide=true
		v.Massless=false
	end
	table.clear(vels)
	table.clear(parts)
	veltoggle.Parent=nil
end
local function teleportStepToward(pos,rate,step,height)
	local posflat=Vector3.new(pos.X,0,pos.Z)
	local cposflat=Vector3.new(root.CFrame.Position.X,0,root.CFrame.Position.Z)
	local dir = (posflat-cposflat).Unit
	local dist = (posflat-cposflat).Magnitude
	if dir.X~=dir.X then
		dir=Vector3.new()
	end
	cposflat+=dir*math.clamp((step or rs.PreSimulation:Wait())*rate,0,dist)
	local ray = workspace:Raycast(cposflat+Vector3.new(0,getMovePart().Position.Y+25,0),Vector3.new(0,-10000,0),getMovementRaycastParams())
	if ray then
		moveTo(ray.Position+Vector3.new(0,height or 3.5,0))
	end
end
local function teleportTo(pos:Vector3,rate:number,reenable:boolean,validator:()->boolean,height)
	local posflat=Vector3.new(pos.X,0,pos.Z)
	local cposflat=Vector3.new(root.CFrame.Position.X,0,root.CFrame.Position.Z)
	local dir = (posflat-cposflat).Unit

	disableBoat1()
	while getMovePart() and validator() do
		local step = rate*rs.PreSimulation:Wait()
		if (cposflat-posflat).Magnitude<step then
			moveTo(pos)
			break
		else
			cposflat+=dir*step
			local ray = workspace:Raycast(cposflat+Vector3.new(0,1000,0),Vector3.new(0,-2000,0),getMovementRaycastParams())
			if ray then
				moveTo(ray.Position+Vector3.new(0,height or 5,0))
			end
		end
	end
	if reenable==nil or reenable then
		enableBoat1()
	end
end












local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local speed = 12
local waitTimes = {2, 2, 2, 2, 158} 
local currentIndex = 1
local walking = false
local moving = false
local chestModel = nil
local distanceUntilTween = 5 
local distanceInFrontOfChest = 5 
local offsetAngle = math.rad(-90) 

local function findChestModel()
	for _, v in ipairs(game.Workspace:GetDescendants()) do
		if v.Name == "Chest" and v:IsA("Model") and (v:GetPivot().Position-root.Position).Magnitude<60 then
			chestModel = v
			break
		end
	end
end




local function walkTo(position)
	if not humanoidRootPart or not chestModel then
		return
	end

	moving = true

	local distance = (position - humanoidRootPart.Position).Magnitude
	local time = distance / speed

	local tweenInfo = TweenInfo.new(time, Enum.EasingStyle.Linear)

	local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = CFrame.new(position)})
	tween:Play()

	tween.Completed:Wait()

	moving = false

	local waitTime = waitTimes[currentIndex]
	wait(waitTime)

	currentIndex = (currentIndex % #waitTimes) + 1
end





local function startWalking()
	walking = true
	spawn(function()
		while walking do
			local positionsToTween = {
				CFrame.new(912.9915771484375, 1.0513689517974854, -1418.68505859375),
				CFrame.new(945.1878662109375, 1.049041509628296, -1433.4344482421875),
				CFrame.new(964.83984375, 0.9180158376693726, -1390.8240966796875),
				CFrame.new(919.7612915039062, 0.8762727975845337, -1386.2818603515625)
			}

			for _, position in ipairs(positionsToTween) do
				walkTo(position.Position)
				tween.Completed:Wait()
				print("ah yes daddy")

			end

			if chestModel then
				local chestCFrame = chestModel.PrimaryPart.CFrame
				local offsetVector = chestCFrame.LookVector * distanceInFrontOfChest
				local rotationOffset = CFrame.Angles(0, offsetAngle, 0)
				local chestPosition = chestCFrame.Position + rotationOffset:VectorToWorldSpace(offsetVector)
				walkTo(chestPosition)
			end

			wait(1) -- Wait for a moment before restarting the sequence
		end
	end)
end

local function stopWalking()
	walking = false
end

local function toggleWalking(enabled)
	if enabled then
		findChestModel()
		startWalking()
	else
		stopWalking()
	end
end
--presses coins

local Farming = combat:AddGroupbox({Name="make sure to place chest",Side=1})



Farming:AddToggle('MyToggle', {
	Text = 'afk coin farm ice',
	Default = false,
	Tooltip = 'Toggle to enable auto gold farm',
	Callback = function(enabled)
		if enabled then
			findChestModel()
			startWalking()
		else
			stopWalking()
		end
	end
})

Farming:AddSlider('WaitTimeSlider', {
	Text = 'distance untill tween',
	Default = 10,
	Min = 0,
	Max = 20,
	Rounding = 1,
	Compact = false,
	Callback =function(value)
		distanceUntilTween = value
	end
})
--auto mine
Farming:AddSlider('WaitTimeSlider', {
	Text = 'dist infront of chest',
	Default = 5,
	Min = 0,
	Max = 15,
	Rounding = 1,
	Compact = false,
	Callback =function(value)
		distanceInFrontOfChest = value
	end
})


local hipHeightSlider = Farming:AddSlider('WaitTimeSlider', {
	Text = 'hip height adj (2) is normal',
	Default = 0,
	Min = 0,
	Max = 15,
	Rounding = 1,
	Compact = false,
	Callback = function(value)
		hipHeight = value -- Update the hip height
		local character = game.Players.LocalPlayer.Character
		local humanoid = character:FindFirstChildOfClass("Humanoid")
		if humanoid then
			humanoid.HipHeight = value -- Adjust the character's hip height
		end
	end
})
--campfire
local packets = require(game:GetService("ReplicatedStorage").Modules.Packets)
local itemIDS = require(game:GetService("ReplicatedStorage").Modules.ItemIDS)

local autohit = combat:AddGroupbox({Name="Auto coinpress,campfire",Side=1})


function GetClosestPress()
	local press, dist = nil, 26

	for _, stru in next, workspace.Deployables:GetChildren() do
		if stru.Name == "Coin Press" then
			local dist2 = (stru:GetPivot().Position - plr.Character:GetPivot().Position).Magnitude

			if dist2 < dist then
				dist = dist2
				press = stru
			end
		end
	end

	return press
end

local autopressenabled = false

task.spawn(function()
	while task.wait(1/30) do
		if not autopressenabled then
			task.wait(1)
			continue
		end
		local press = GetClosestPress()

		if press ~= nil then
			packets.InteractStructure.send({
				["entityID"] = press:GetAttribute("EntityID"),
				["itemID"] = itemIDS["Gold"]
			})
		end
	end
end)
--shark
autohit:AddToggle('Coin press aura', {
	Text = 'Presses coins',
	Default = false,
	Tooltip = 'Toggle to enable coin presser',
	Callback = function(enabled)
		autopressenabled = enabled
	end
})
--auto pickup
local campfireAuraEnabled = false
local chosenItem = "Log"
local maxCampDistance = 25
local campAmount = 5
local minCampHealth = 50

function GetClosestCampfireWithHealth(val)
	local campfire, dist = nil, maxCampDistance
	local plr = game.Players.LocalPlayer

	for _, stru in next, workspace.Deployables:GetChildren() do
		if stru.Name == "Campfire" then
			local dist2 = (stru:GetPivot().Position - plr.Character:GetPivot().Position).Magnitude

			if dist2 < dist and tonumber(stru:FindFirstChild("Board"):FindFirstChild("Billboard"):FindFirstChild("Backdrop"):FindFirstChild("TextLabel").Text) <= val then
				dist = dist2
				campfire = stru
			end
		end
	end

	return campfire
end

spawn(function()
	while task.wait() do
		if not campfireAuraEnabled then
			task.wait(1)
			continue
		end
		local campfire = GetClosestCampfireWithHealth(minCampHealth)

		if campfire then
			for i = 1, campAmount do
				packets.InteractStructure.send({
					["entityID"] = campfire:GetAttribute("EntityID"),
					["itemID"] = itemIDS[chosenItem]
				})
				task.wait(0.3)
			end
			task.wait(0.1)
		end
	end
end)
--screengui

autohit:AddToggle('Campfire Aura', {
	Text = 'fuel campfire1',
	Default = false,
	Tooltip = 'Toggle to make your campfires automatically fill up',
	Callback = function(enabled)
		campfireAuraEnabled = enabled
	end
})

autohit:AddSlider('Campfire Health', {
	Text = 'health for regen1',
	Default = minCampHealth,
	Min = 1,
	Max = 250,
	Rounding = 1,
	Compact = false,
	Callback = function(Value)
		minCampHealth = Value
	end
})


--auto craft

autohit:AddDropdown('Campfire Resource', {
	Values = { 'Log', 'Leaves', 'Wood' },
	Default = 1,
	Multi = false,
	Text = 'Resource1',
	Tooltip = 'Select a resource for the campfire aura to use that :)',
	Callback = function(Value)
		chosenItem = Value
	end
})

autohit:AddSlider('Campfire Distance', {
	Text = 'distance1',
	Default = 25,
	Min = 0,
	Max = 35,
	Rounding = 1,
	Compact = false,
	Callback = function(Value)
		maxCampDistance = Value
	end
})

autohit:AddSlider('Campfire Amount', {
	Text = 'amount1',
	Default = 5,
	Min = 1,
	Max = 15,
	Rounding = 1,
	Compact = false,
	Callback = function(Value)
		campAmount = Value
	end
})




local campfireAuraEnabled1 = false
local chosenItem1 = "Log"
local maxCampDistance1 = 25
local campAmount1 = 5
local minCampHealth1 = 50

function GetClosestCampfireWithHealth(val)
	local campfire, dist = nil, maxCampDistance1
	local plr = game.Players.LocalPlayer

	for _, stru in next, workspace.Deployables:GetChildren() do
		if stru.Name == "Campfire" then
			local dist2 = (stru:GetPivot().Position - plr.Character:GetPivot().Position).Magnitude

			if dist2 < dist and tonumber(stru:FindFirstChild("Board"):FindFirstChild("Billboard"):FindFirstChild("Backdrop"):FindFirstChild("TextLabel").Text) <= val then
				dist = dist2
				campfire = stru
			end
		end
	end

	return campfire
end

spawn(function()
	while task.wait() do
		if not campfireAuraEnabled1 then
			task.wait(1)
			continue
		end
		local campfire = GetClosestCampfireWithHealth(minCampHealth1)

		if campfire then
			for i = 1, campAmount1 do
				packets.InteractStructure.send({
					["entityID"] = campfire:GetAttribute("EntityID"),
					["itemID"] = itemIDS[chosenItem1]
				})
				task.wait(0.3)
			end
			task.wait(0.1)
		end
	end
end)
--ice farm
autohit:AddLabel('_________')
--auto grab
autohit:AddToggle('Campfire Aura', {
	Text = 'fuel campfire2',
	Default = false,
	Tooltip = 'Toggle to make your campfires automatically fill up',
	Callback = function(enabled)
		campfireAuraEnabled1 = enabled
	end
})

autohit:AddSlider('Campfire Health', {
	Text = 'Health for regen2',
	Default = minCampHealth1,
	Min = 1,
	Max = 250,
	Rounding = 1,
	Compact = false,
	Callback = function(Value)
		minCampHealth1 = Value
	end
})


--auto craft

autohit:AddDropdown('Campfire Resource', {
	Values = { 'Log', 'Leaves', 'Wood' },
	Default = 1,
	Multi = false,
	Text = 'Resource2',
	Tooltip = 'Select a resource for the campfire aura to use that :)',
	Callback = function(Value)
		chosenItem1 = Value
	end
})

autohit:AddSlider('Campfire Distance', {
	Text = 'distance2',
	Default = 25,
	Min = 0,
	Max = 35,
	Rounding = 1,
	Compact = false,
	Callback = function(Value)
		maxCampDistance1 = Value
	end
})
autohit:AddSlider('Campfire Amount', {
	Text = 'amount2',
	Default = 5,
	Min = 1,
	Max = 15,
	Rounding = 1,
	Compact = false,
	Callback = function(Value)
		campAmount1 = Value
	end
})







--auto eat





local autohit = combat:AddGroupbox({Name="auto mine"})
local MineAura = false

--afk
autohit:AddToggle('MyToggle', {
	Text = 'mine aura',
	Default = false,
	Tooltip = 'Toggle to automatically craft items',
	Callback = function(Value)
		MineAura = Value
		while MineAura do
			if CheckPlayer() then
				local Target = GetClosestItem()
				local Tool = CheckTool()
				if PlaceID == 11729688377 then
					if Tool then
						if Target then
							Packets.SwingTool.send({GetEntityID(Target.Parent)})
							local Loaded = LocalPlayer.Character.Humanoid:LoadAnimation(ReplicateAnimation)
							Loaded:Play()
						end
					end
				elseif PlaceID == 11879754496 then
					if Tool then
						if Target then
							Packets.SwingTool.send({Target})
							local Loaded = LocalPlayer.Character.Humanoid:LoadAnimation(ReplicateAnimation)
							Loaded:Play()
						end
					end
				end
			end
			task.wait(0.1)
		end
	end
})




local Farming = combat:AddGroupbox({Name="auto eat"})

autoeat_enabled = Farming:AddToggle(1,{Text="Enabled"}):AddKeyPicker(1,{Default="",Text="Auto Eat",SyncToggleState=true})
autoeat_threshold = Farming:AddSlider(1,{Text="Threshold",Default=75,Min=0,Max=101,Rounding=1})
autoeat_foods = Farming:AddInput(1,{Text="Foods",Default="Lemon, Cooked Meat"})

autoeat_enabled:OnChanged(function()
	while true do
		local step = rs.PreSimulation:Wait()
		if not (isrunning and autoeat_enabled.Value) then break end
		local hunger = (statsgui.Food.Slider.AbsoluteSize.X/statsgui.Food.AbsoluteSize.X)*100
		if hunger<autoeat_threshold.Value then
			for i,v in pairs(autoeat_foods.Value:split(",")) do
				if getSlot(trim(v)) then
					useSlot(getSlot(trim(v)))
					break
				end
			end
			task.wait(plr:GetNetworkPing()+0.4)
		end
	end
end)






--campfire



--key
local Farming = combat:AddGroupbox({Name="auto craft"})
autocraft_count = Farming:AddSlider('DepboxSlider', { Text = 'how many', Default = 1, Min = 0, Max = 25, Rounding = 0 })
autocraft_item = Farming:AddInput(1,{Text="Resources",Default="Leaf Shirt, Leaf Pants, Leaf Bag, Club, Light, Arrow, Bow, War Horn"})


Farming:AddToggle('MyToggle', {
	Text = 'Auto Craft',
	Default = false,
	Tooltip = 'Toggle to automatically craft items',
	Callback = function(v)
		autocraft_enabled = v
		if autocraft_enabled then
			while autocraft_enabled do
				for i = 1, autocraft_count.Value do
					craft(getItemId(autocraft_item.Value))
				end
				task.wait(0.1) -- Adjust delay as needed
			end
		end
	end,
})






local Farming = combat:AddGroupbox({Name="Hide Items"})
local hideitems_enabled = Farming:AddToggle(1,{Text="Enabled"}):AddKeyPicker(1,{Default="",Text="No Slide",SyncToggleState=true})

local items = workspace:WaitForChild("Items")

hideitems_enabled:OnChanged(function(new)
	if new then
		items.Parent=nil
	else
		items.Parent=workspace
	end
end)
table.insert(unloads,function()
	items.Parent=workspace
end)




--shark


--shark
local Farming = combat:AddGroupbox({Name="auto pickup"})
autograb_enabled = Farming:AddToggle(1,{Text="Enabled"}):AddKeyPicker(1,{Default="",Text="Auto Pickup",SyncToggleState=true})
autograb_range = Farming:AddSlider(1,{Text="Range",Default=25,Min=0,Max=25,Rounding=1})
autograb_whitelistenabled = Farming:AddToggle(1,{Text="Certain Resource Enabled",Default=true})
autograb_whitelist = Farming:AddInput(1,{Text="Resources",Default="Gold, Crystal Chunk, Void Shard, Essence, Emerald, Pink Diamond, Coin2, Coin, Magnetite, Spirit Key"})
autograb_chest = Farming:AddToggle(1,{Text="Chest"})
autograb_safechest = Farming:AddToggle(1,{Text="Safe Chest"})
local autograbchest
Farming:AddButton({Text="Bind Near Chest",Func=function()
	local best
	local bestdist = 25
	for i,v in pairs(workspace.Deployables:GetChildren()) do
		if v.Name:find("Chest") then
			if (root.Position-v:GetPivot().Position).Magnitude<bestdist then
				best=v.Base
			end
		end
	end
	autograbchest = best or autograbchest
end,})
--ice goldfarm
local autograbwhitelist = {}
autograb_whitelist:OnChanged(function()
	table.clear(autograbwhitelist)
	for i,v in pairs(autograb_whitelist.Value:split(",")) do
		autograbwhitelist[trim(v)]=true
	end
end)
for i,v in pairs(autograb_whitelist.Value:split(",")) do
	autograbwhitelist[trim(v)]=true
end

local function chest(item)
	if not autograbchest then return end
	if item:IsA("Model") then
		for i,v in pairs(item:GetDescendants()) do
			if v:IsA("BasePart") then v.CFrame=autograbchest.CFrame end
		end
		touch(getMover(item),autograbchest)
	else
		item.CFrame=autograbchest.CFrame
		touch(item,autograbchest)
	end
end
autograb_enabled:OnChanged(function()
	local items = {}
	local lastupdate = Vector3.new(0,-1000,0)
	local itemcon = workspace.Items.ChildAdded:Connect(function(v)
		if v:GetPivot().Position~=Vector3.new() then
			local dist = (root.Position-v:GetPivot().Position).Magnitude
			if dist<75 then
				table.insert(items,v)
			end
		end
	end)
	while true do
		local step = rs.PostSimulation:Wait()
		if not (isrunning and autograb_enabled.Value) then break end
		if not root then continue end
		if (root.Position-lastupdate).Magnitude>25 then
			table.clear(items)
			for i,v in pairs(workspace.Items:GetChildren()) do
				if v:GetPivot().Position~=Vector3.new() then
					local dist = (root.Position-v:GetPivot().Position).Magnitude
					if dist<75 then
						table.insert(items,v)
					end
				end
			end
			lastupdate=root.Position
		end
		for i,v in pairs(items) do
			if v:GetPivot().Position~=Vector3.new() and (not autograb_whitelistenabled.Value or autograbwhitelist[v.Name]) then
				local dist = (root.Position-v:GetPivot().Position).Magnitude
				if dist<autograb_range.Value then
					if autograb_chest.Value then
						manipulate(v,chest,autograb_safechest.Value)
						break
					else
						pickup(v)
					end
				end
			end
		end
	end
	itemcon:Disconnect()
end)

loadstring(game:HttpGet('https://raw.githubusercontent.com/Proxylol/OtherScripts/main/AntiAfk.lua'))()
